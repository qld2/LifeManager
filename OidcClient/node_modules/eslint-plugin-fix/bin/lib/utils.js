"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const eslint_1 = __importDefault(require("eslint"));
const eslint_rule_composer_1 = require("eslint-rule-composer");
const rules = new eslint_1.default.Linter().getRules();
/**
 * Map eslint base rule to new one.
 *
 * @param id Id of the base rule.
 * @param map Mapping function.
 * @param fixType Fix type.
 * @returns Rule
 */
function mapBaseRule(id, map, fixType = 'code') {
    const rule = eslint_rule_composer_1.mapReports(rules.get(id), map);
    if (rule.meta) {
        rule.meta.fixable = fixType;
    }
    return rule;
}
/**
 * Filter from eslint base rules
 *
 * @param id ID of the base rule.
 * @param filter Filtering function.
 * @param fixType Fix type.
 * @returns Rule
 */
function filterBaseRule(id, filter, fixType = 'code') {
    const rule = eslint_rule_composer_1.filterReports(rules.get(id), filter);
    if (rule.meta) {
        rule.meta.fixable = fixType;
    }
    return rule;
}
/**
 * Filtering & Mapping eslint base rules.
 *
 * @param id ID of the base rule.
 * @param filter Filtering function.
 * @param map Mapping function.
 * @param fixType Fix type
 * @returns Rule
 */
function filterMapBaseRule(id, filter, map, fixType = 'code') {
    const rule = eslint_rule_composer_1.mapReports(eslint_rule_composer_1.filterReports(rules.get(id), filter), map);
    if (rule.meta) {
        rule.meta.fixable = fixType;
    }
    return rule;
}
/**
 * Extends the problem.
 *
 * @param problem The origin problem.
 * @param properties The new properties.
 * @returns Extended problem from.
 */
function extendsProblem(problem, { message = 'I can fix it', messageId = null, fix, }) {
    return Object.assign(Object.assign({}, problem), { message, messageId, fix });
}
exports.default = {
    mapBaseRule,
    filterBaseRule,
    extendsProblem,
    filterMapBaseRule
};
